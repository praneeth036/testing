{"version":3,"sources":["components/upload.js","components/hospitallogin.js","components/userlogin.js","App.js","serviceWorker.js","index.js"],"names":["Upload","props","uploadDetails","x","patientno","state","initialValues","admission_date","discharge_date","doctor_id","remarks","status","support","hospital_id","setState","spin","fetch","method","headers","body","JSON","stringify","then","r","json","res","success","popup","changeHandler","e","name","target","value","inserted","className","htmlFor","type","id","this","onChange","rows","onClick","class","role","React","Component","Hospitallogin","changeHandler1","patient_id","getpatientdetails","users","g","getdetails","hospitaldetails","hide","map","index","key","username","hospital_name","contact","placeholder","scope","user","aadhar_no","admission","discharge","href","Userlogin","message","App","exact","activeClassName","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c86a48c5.chunk.js","sourcesContent":["import React from 'react';\n\n\n\n\nexport default class Upload extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            spin:0,\n            popup:0,\n            initialValues:{\n                patientno:'',\n                admission_date:'',\n                discharge_date:'',\n                doctor_id:'',\n                remarks:'',\n                status:'',\n                support:'',\n                hospital_id:'',\n                inserted:'',\n                \n            },\n        }\n    }\n    uploadDetails=()=>{\n        let x={\n            patientno:this.state.initialValues.patientno,\n            admission_date:this.state.initialValues.admission_date,\n            discharge_date:this.state.initialValues.discharge_date,\n            doctor_id:this.state.initialValues.doctor_id,\n            remarks:this.state.initialValues.remarks,\n            status:this.state.initialValues.status,\n            support:this.state.initialValues.support,\n            hospital_id:this.state.initialValues.hospital_id\n        }\n        this.setState({\n            spin:1\n        })\n        \n            fetch(\"https://medrex.herokuapp.com/upload-record.php\",{\n                method:'POST',\n                headers:{'Content-type':'application/json'},\n                body:JSON.stringify(x),\n            })\n            .then(r=>r.json()).then(res=>{\n                if(res.success===1){\n                   this.setState({\n                       popup:1,\n                       spin:0,\n                       initialValues:[] //Empty the values on submit button to avoid duplicate entry!\n                   })\n                }\n                else{\n                    this.setState({spin:0})\n                }\n            })\n       \n    }\n\n\n    changeHandler=e=>{\n        const name=e.target.name;\n        const value=e.target.value;\n        this.setState({\n            initialValues:{\n                ...this.state.initialValues,\n                [name]:value\n            }\n            \n\n        });\n        \n    }\n\n\n    render(){\n        return(\n            <div>\n                \n                <div className=\"container\">\n                <h1 className=\"text-white bg-dark text-center\">Patient record entry form</h1>\n                <br/>\n                <div className=\"col-lg-6 m-auto d-block\">\n            <form >\n                <div className=\"form-group\">\n                                <label htmlFor=\"user\"> Patient No. </label>\n                                <input type=\"text\" name=\"patientno\" id=\"user\" className=\"form-control\" value={this.state.initialValues.patientno}\n                    onChange={this.changeHandler}/>\n                </div>\n                <div className=\"form-group\">\n                                <label htmlFor=\"admission_date\">Date of Admission</label>\n                                <input type=\"date\" name=\"admission_date\" id=\"admission_date\" className=\"form-control\" value={this.state.initialValues.admission_date}\n                    onChange={this.changeHandler}/>\n                                \n                </div>\n                        <div className=\"form-group\">\n                        <label htmlFor=\"discharge_date\">Date of Discharge</label>\n                                <input type=\"date\" name=\"discharge_date\" id=\"discharge_date\" className=\"form-control\"value={this.state.initialValues.discharge_date}\n                    onChange={this.changeHandler}/>\n                        </div>\n        <div className=\"form-group\">\n                                <label htmlFor=\"doctor_id\">Doctor ID</label>\n                                <input type=\"text\" name=\"doctor_id\" id=\"doctor_id\" className=\"form-control\" value={this.state.initialValues.doctor_id}\n                    onChange={this.changeHandler}/>\n                        </div>\n                        <div className=\"form-group\">\n                                <label htmlFor=\"remarks\">Remarks</label>\n                                <textarea id=\"remarks\" name=\"remarks\" className=\"md-textarea form-control\" rows=\"3\" value={this.state.initialValues.remarks}\n                    onChange={this.changeHandler}></textarea>\n                                \n                        </div>\n                \n                \n                <div className=\"form-group\">\n                                <label htmlFor=\"support\"> Support Documents Link</label>\n                                <input type=\"text\" name=\"support\" id=\"support\" className=\"form-control\" value={this.state.initialValues.support}\n                    onChange={this.changeHandler}/>\n                        </div>\n                        <div className=\"form-group\">\n                                <label htmlFor=\"status\"> Status</label>\n                                <input type=\"text\" name=\"status\" id=\"status\" className=\"form-control\" value={this.state.initialValues.status}\n                    onChange={this.changeHandler}/>\n                    \n                        </div>\n                        <div className=\"form-group\">\n                                <label htmlFor=\"status\"> Hospital-ID</label>\n                                <input type=\"text\" name=\"hospital_id\" id=\"hospital_id\" className=\"form-control\" value={this.state.initialValues.hospital_id}\n                    onChange={this.changeHandler}/>\n                    \n                        </div>\n                        \n                                \n\n            </form>\n\n            <button onClick={this.uploadDetails} className=\"btn btn-success\">Upload</button>\n            <br/>\n            {this.state.spin===1?<div class=\"spinner-border\" role=\"status\">\n  <span class=\"sr-only\">Loading...</span>\n</div>:null}\n            <br/>{this.state.popup===1?<div class=\"alert alert-success\">\n  <strong>Success!</strong> Patient-info Recorded..\n</div>:null}\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n            <br/>\n        </div>\n        </div>\n            </div>\n        );\n    }\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n\nconst Upload=()=>{\n    \nconst formik=useFormik({\n    initialValues:{\n        patientno:'',\n        admission_date:'',\n        discharge_date:'',\n        doctor_id:'',\n        remarks:'',\n        status:'',\n        support:'',\n        hospital_id:'12'\n        \n    },\n    onSubmit:values=>{\n        alert(JSON.stringify(values))\n    }\n});\n    return(\n        <div>\n            \n            \n            \n        </div>\n    )\n\n\n}\n\n\n\n\n\n\n\n\n/*\nclass ComponentA extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            employee:{\n                Id:'',\n                Name:'',\n                Location:'',\n                Salary:''\n            }\n        }\n    }\n\n\n    changeHandler=e=>{\n        const name=e.target.name;\n        const value=e.target.value;\n        this.setState({\n            employee:{\n                ...this.state.employee,\n                [name]:value\n            }\n            \n\n        });\n        \n    }\n\n    oncreateEmployee=()=>{\n        console.log(this.state.employee)\n    }\n    \n\n\n    render(){\n        \n        return (\n            \n            <div>\n                <p>Component  A</p>\n                <ComponentB/>\n                <h2>New form</h2>\n                <form>\n                    <p>\n                        <label>Employee ID:<input type=\"text\" name=\"Id\"\n                        value={this.state.employee.Id} onChange={this.changeHandler}\n                        ></input></label>\n                    </p>\n                    <p>\n                        <label>Employee Name:<input type=\"text\" name=\"Name\"\n                        value={this.state.employee.Name} onChange={this.changeHandler}\n                        ></input></label>\n                    </p>\n                    <p>\n                        <label>Employee Location:<textarea name=\"Location\"\n                        value={this.state.employee.Location} onChange={this.changeHandler}\n                        ></textarea></label>\n                    </p>\n                    <p>\n                        <label>Employee Salary:<input type=\"text\" name=\"Salary\"\n                        value={this.state.employee.Salary} onChange={this.changeHandler}\n                        ></input></label>\n                    </p>\n                </form>\n                <button onClick={this.oncreateEmployee}>Create</button>\n            </div>\n        \n\n            \n        );\n    }\n}\n\n\n\n*/\n","import React from 'react';\n\n\n\nclass Hospitallogin extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            spin:0,\n            patient_id:'',\n            hide:false,\n            hospital_id:'',\n            hospitaldetails:[],\n            users:[]\n            \n        }\n    }\n    changeHandler=e=>{\n            \n            this.setState(\n                {\n                    hospital_id:e.target.value\n                }\n            )\n\n    }\n    changeHandler1=e=>{\n            \n        this.setState(\n            {\n                patient_id:e.target.value\n            }\n        )\n\n}\n    getpatientdetails=()=>{\n        let x={\n            hospital_id:this.state.hospital_id,\n            patient_id:this.state.patient_id\n            \n        }\n        this.setState({\n            users:[],\n            spin:1\n        })\n        \n        fetch(\"https://medrex.herokuapp.com/get-patient.php\",{\n            method:'POST',\n            headers:{'Content-type':'application/json'},\n            body:JSON.stringify(x)\n        })\n        .then(g=>g.json()).then(res=>{\n            if(res.success===1){\n                \n                this.setState({\n                    users:res.users,\n                    spin:0\n                })\n            }\n            else{\n                this.setState({\n                    spin:0\n                })\n            }\n\n        })\n    }\n    getdetails=()=>{\n        \n        let x={\n            hospital_id:this.state.hospital_id\n        }\n        this.setState({\n            spin:1\n        })\n        fetch(\"https://medrex.herokuapp.com/hospital-fetch.php\",{\n            method:'POST',\n            headers:{'Content-type':'application/json'},\n            body:JSON.stringify(x)\n\n        })\n        .then(r=>r.json()).then(res=>{\n            if(res.success===1){\n\n                this.setState({\n                    hospitaldetails:res.users,\n                    hide:true,\n                    spin:0\n                })\n                \n            }\n            else{\n                this.setState({\n                    spin:0\n                })\n            }\n            //document.write(JSON.stringify(this.state.hospitaldetails[0]))\n\n        })\n    }\n\n\n    render(){\n        return(\n            \n            <div>\n                \n                {this.state.hide===true?<div>{this.state.hospitaldetails.map((res,index)=>\n                \n                <div className=\"w3-panel w3-card-4\" key={index}>\n                <h2 key={\"username\"+index}>Welcome {res.username}</h2>\n                <h4 key={\"hospitalname\"+index}><b>Hospital Name: </b>{res.hospital_name}</h4>\n                <h4 key={\"contact\"+index}><b>Contact :</b> {res.contact}</h4>\n                <h4 key={\"hospital_id\"+index}><b>Hospital ID:</b>{res.hospital_id}</h4>\n                \n                </div>)}\n\n                <div className=\"w3-panel w3-card-4\">\n                <p>\n                    <form >\n                        <br/>\n                        <label className=\"font-weight-bold\">Enter Patient-ID</label>\n                <input className=\"form-control\" type=\"text\" name=\"patient_id\" placeholder=\"Enter patient ID\" value={this.state.patient_id} onChange={this.changeHandler1}/><br/><br/>\n                \n                    </form>\n                    <button className=\"btn btn-outline-success my-2 my-sm-0\" onClick={this.getpatientdetails}>Get details</button>\n                </p>\n                <br/>\n            </div>\n\n               \n            <div class=\"container\">\n                <table className=\"table table-stripped\">\n                    <thead>\n                    <tr>\n                            \n                            <th scope=\"col\">Patient ID</th>\n                            <th scope=\"col\">Admission Date</th>\n                            <th scope=\"col\">Discharge Date</th>\n                            <th scope=\"col\">Doctor</th>\n                            <th scope=\"col\">Remarks</th>\n                            <th scope=\"col\">Support Documents</th>\n                            <th scope=\"col\">Status</th>\n                            <th scope=\"col\">Hospital</th>\n\n                        </tr>\n                    </thead>\n                    <tbody>\n        {this.state.users.map((user,index)=>(\n            <tr key={index}>\n                <td key={\"aadhar_no\"+index}>{user.aadhar_no}</td>\n        <td key={\"admission_date\"+index}>{user.admission}</td>\n        <td key={\"discharge_date\"+index}>{user.discharge}</td>\n        <td key={\"doctor_id\"+index}>{user.doctor_id}</td>\n        <td key={\"remarks\"+index}>{user.remarks}</td>\n        <td key={\"support\"+index}>{user.support!=='Not accessible!'?<a href={user.support}>Click here View Medical Documents</a>:<p>Not Accessible!</p>}</td>\n        <td key={\"status\"+index}>{user.status}</td>\n        <td key={\"hospital_id\"+index}>{user.hospital_id}</td>\n        </tr>\n            ))} \n            </tbody>\n            </table>\n                </div>\n                <div>{this.state.spin===1?<div class=\"spinner-border\" role=\"status\">\n  <span class=\"sr-only\">Loading...</span>\n</div>:null}</div>\n\n                </div>:\n                \n\n<div className=\"w3-panel w3-card-4\">\n<p>\n    <form >\n        <br/>\n        <label className=\"font-weight-bold\">Hospital-ID</label>\n<input className=\"form-control\" type=\"text\" name=\"hospital_id\" placeholder=\"Enter patient ID\" value={this.state.hospital_id} onChange={this.changeHandler}/><br/><br/>\n\n    </form>\n    <button onClick={this.getdetails} className=\"btn btn-primary\">Login</button>\n</p>\n<br/>\n        <div>{this.state.spin===1?<div class=\"spinner-border\" role=\"status\">\n  <span class=\"sr-only\">Loading...</span>\n</div>:null}</div>\n</div>\n\n                \n    }\n            </div>\n            \n        );\n    }\n    \n}\nexport default Hospitallogin;","import React from 'react';\n\nclass Userlogin extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            spin:0,\n            users:[],\n            id:'',\n            message:''\n        }\n    }\n    changeHandler=e=>{\n            \n            this.setState(\n                {\n                    id:e.target.value\n                }\n            )\n\n    }\n    getdetails=()=>{\n        let x={\n            id:this.state.id\n        }\n        this.setState({\n            spin:1\n        })\n        fetch('https://medrex.herokuapp.com/fetch-user.php',{\n            method:'POST',\n            headers:{'Content-type':'application/json'},\n            body:JSON.stringify(x),\n        })\n        \n        .then(r=>r.json()).then(res=>{\n            \n            if(res.success===1){\n                this.setState({\n                    spin:0\n                })\n                \n                //document.write(JSON.stringify(res.users))\n                \n                this.setState({\n                    \n                    message:'Found!'\n                })\n                this.setState({ users: res.users })\n                //res.users.forEach((x)=>console.log(x.aadhar_no,x.admission));\n                \n            }\n            else{\n                this.setState({\n                    message:'Invalid!',\n                    users:[]\n                })\n                this.setState({\n                    spin:0\n                })\n            }\n        })\n    }\n    \n    render(){\n        return(\n            <div>\n            <div className=\"w3-panel w3-card-4\">\n                <p>\n                    <form >\n                        <br/>\n                        <label className=\"font-weight-bold\">Patient-ID</label>\n                <input className=\"form-control\" type=\"text\" name=\"patient_id\" placeholder=\"Enter patient ID\" value={this.state.id} onChange={this.changeHandler}/><br/><br/>\n                \n                    </form>\n                    <button className=\"btn btn-outline-success my-2 my-sm-0\" onClick={this.getdetails} >Get details</button>\n                </p>\n                <br/>\n            </div>\n            \n            \n        \n        \n        {this.state.message==='Invalid!'?<div className=\"alert alert-danger\" role=\"alert\">\n  <strong>Oh snap! </strong>Some error occured!\n</div>:null}\n{this.state.spin===1?<div class=\"spinner-border\" role=\"status\">\n  <span class=\"sr-only\">Loading...</span>\n</div>:null}\n        \n                <table className=\"table table-stripped\">\n                    <thead>\n                    <tr>\n                            \n                            <th scope=\"col\">Patient ID</th>\n                            <th scope=\"col\">Admission Date</th>\n                            <th scope=\"col\">Discharge Date</th>\n                            <th scope=\"col\">Doctor</th>\n                            <th scope=\"col\">Remarks</th>\n                            <th scope=\"col\">Support Documents</th>\n                            <th scope=\"col\">Status</th>\n                            <th scope=\"col\">Hospital</th>\n\n                        </tr>\n                    </thead>\n                    <tbody>\n        {this.state.users.map((user,index)=>(\n            <tr key={index}>\n                <td key={\"aadhar_no\"+index}>{user.aadhar_no}</td>\n        <td key={\"admission_date\"+index}>{user.admission}</td>\n        <td key={\"discharge_date\"+index}>{user.discharge}</td>\n        <td key={\"doctor_id\"+index}>{user.doctor_id}</td>\n        <td key={\"remarks\"+index}>{user.remarks}</td>\n        <td key={\"support\"+index}>{user.support}</td>\n        <td key={\"status\"+index}>{user.status}</td>\n        <td key={\"hospital_id\"+index}>{user.hospital_id}</td>\n        </tr>\n            ))} \n            </tbody>\n            </table>\n        \n                \n            \n        </div>\n        \n        );\n    }\n    \n}\nexport default Userlogin;","import React from 'react';\nimport './App.css';\n//import ComponentA from './components/ComponentA'\n//import {UserProvider} from './components/context.js'\nimport {Route,NavLink, Switch} from 'react-router-dom'\nimport Upload from './components/upload';\n//import Home from './components/home'\nimport Hospitallogin from './components/hospitallogin'\nimport Userlogin from './components/userlogin'\n\n\nexport default class App extends React.Component{\n    render(){\n      return (\n        <div>\n          <nav className=\"navbar navbar-expand-sm bg-light \">\n\n\n<ul className=\"navbar-nav\">\n  <li className=\"nav-item\">\n  <NavLink className=\"nav-link\" exact activeClassName=\"testclass\" to=\"/hospital\">Hospital Login</NavLink>\n  </li>\n  <li className=\"nav-item\">\n  <NavLink className=\"nav-link\" exact activeClassName=\"testclass\" to=\"/individual\">Individual Login</NavLink>\n  </li>\n  <li className=\"nav-item\">\n  <NavLink className=\"nav-link\" exact activeClassName=\"testclass\" to=\"/upload\">Click here to upload patient-record</NavLink>\n  </li>\n</ul>\n\n</nav>\n        \n        \n        \n        <Switch>\n        <Route path=\"/hospital\" component={Hospitallogin}></Route>\n        <Route path=\"/individual\" component={Userlogin}></Route>\n        <Route path=\"/upload\" component={Upload}></Route>\n        </Switch>\n        </div>\n\n      );\n    }\n\n  }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter><App/></BrowserRouter>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}