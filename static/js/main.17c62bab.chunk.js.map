{"version":3,"sources":["components/context.js","components/ComponentC.js","components/ComponentB.js","components/ComponentA.js","App.js","serviceWorker.js","index.js"],"names":["userContext","React","createContext","UserProvider","Provider","UserConsumer","Consumer","ComponentC","value","Component","ComponentB","ComponentA","formik","useFormik","initialValues","patientno","admission_date","discharge_date","doctor_id","remarks","status","onSubmit","values","alert","JSON","stringify","className","handleSubmit","htmlFor","type","name","id","class","onChange","handleChange","for","rows","support","App","props","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAEMA,G,MAAYC,IAAMC,iBAGlBC,EAAaH,EAAYI,SACzBC,EAAaL,EAAYM,SCehBC,E,uKAbP,OACI,6BACI,kBAACF,EAAD,MAEQ,SAACG,GACG,OAAO,6BAAMA,W,GAThBP,IAAMQ,WCUhBC,E,uKARP,OACI,6BAEI,kBAAC,EAAD,W,GAPST,IAAMQ,W,QCoKhBE,EAlKE,WACjB,IAAMC,EAAOC,YAAU,CACnBC,cAAc,CACVC,UAAU,GACVC,eAAe,GACfC,eAAe,GACfC,UAAU,GACVC,QAAQ,GACRC,OAAO,IAGXC,SAAS,SAAAC,GACLC,MAAMC,KAAKC,UAAUH,OAGzB,OACI,6BACI,kBAAC,EAAD,MACA,yBAAKI,UAAU,aACX,wBAAIA,UAAU,kCAAd,6BACA,6BACA,yBAAKA,UAAU,2BACnB,0BAAML,SAAUT,EAAOe,cACnB,yBAAKD,UAAU,cACC,2BAAOE,QAAQ,QAAf,iBACA,2BAAOC,KAAK,OAAOC,KAAK,YAAYC,GAAG,OAAOC,MAAM,eAAexB,MAAOI,EAAOU,OAAOP,UACpGkB,SAAUrB,EAAOsB,gBAErB,yBAAKR,UAAU,cACC,2BAAOE,QAAQ,kBAAf,qBACA,2BAAOC,KAAK,OAAOC,KAAK,iBAAiBC,GAAG,iBAAiBC,MAAM,eAAexB,MAAOI,EAAOU,OAAON,eACnHiB,SAAUrB,EAAOsB,gBAGb,yBAAKR,UAAU,cACf,2BAAOE,QAAQ,kBAAf,qBACQ,2BAAOC,KAAK,OAAOC,KAAK,iBAAiBC,GAAG,iBAAiBC,MAAM,eAAcxB,MAAOI,EAAOU,OAAOL,eAClHgB,SAAUrB,EAAOsB,gBAE7B,yBAAKR,UAAU,cACS,2BAAOE,QAAQ,aAAf,aACA,2BAAOC,KAAK,OAAOC,KAAK,YAAYC,GAAG,YAAYC,MAAM,eAAexB,MAAOI,EAAOU,OAAOJ,UACzGe,SAAUrB,EAAOsB,gBAEb,yBAAKF,MAAM,cACH,2BAAOG,IAAI,WAAX,WACA,8BAAUJ,GAAG,UAAUD,KAAK,UAAUE,MAAM,2BAA2BI,KAAK,IAAI5B,MAAOI,EAAOU,OAAOH,QACjHc,SAAUrB,EAAOsB,gBAKrB,yBAAKR,UAAU,cACC,2BAAOE,QAAQ,WAAf,2BACA,2BAAOC,KAAK,OAAOC,KAAK,UAAUC,GAAG,UAAUC,MAAM,eAAexB,MAAOI,EAAOU,OAAOe,QACrGJ,SAAUrB,EAAOsB,gBAEb,yBAAKF,MAAM,cACH,2BAAOG,IAAI,UAAX,WACA,2BAAON,KAAK,OAAOC,KAAK,SAASC,GAAG,SAASC,MAAM,eAAexB,MAAOI,EAAOU,OAAOF,OACnGa,SAAUrB,EAAOsB,gBAGL,2BAAOL,KAAK,SAASC,KAAK,SAAStB,MAAM,SAASwB,MAAM,yBC9DnEM,E,kDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTV,KAAK,WAHS,E,qDAOhB,OACE,6BACE,kBAAC3B,EAAD,CAAcK,MAAM,IACpB,kBAAC,EAAD,Y,GAXyBP,IAAMQ,WCOnBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17c62bab.chunk.js","sourcesContent":["import React from 'react';\n\nconst userContext=React.createContext();\n\n\nconst UserProvider=userContext.Provider\nconst UserConsumer=userContext.Consumer\n\n\nexport {UserConsumer,UserProvider}\n\n\n\n\n","import React from 'react';\nimport { UserConsumer } from './context';\n\n\nclass ComponentC extends React.Component{\n    \n    render(){\n        \n        return (\n            <div>\n                <UserConsumer>\n                    {\n                        (value)=>{\n                            return <div>{value}</div>\n                        }\n                    }\n                </UserConsumer>\n            </div>\n        );\n    }\n}\nexport default ComponentC;","import React from 'react';\nimport ComponentC from './ComponentC'\nclass ComponentB extends React.Component{\n    \n    render(){\n        \n        return (\n            <div>\n                \n                <ComponentC/>\n            </div>\n        );\n    }\n}\nexport default ComponentB;","import React from 'react';\nimport ComponentB from './ComponentB';\nimport {useFormik} from 'formik'\n\nconst ComponentA=()=>{\nconst formik=useFormik({\n    initialValues:{\n        patientno:'',\n        admission_date:'',\n        discharge_date:'',\n        doctor_id:'',\n        remarks:'',\n        status:''\n        \n    },\n    onSubmit:values=>{\n        alert(JSON.stringify(values))\n    }\n});\n    return(\n        <div>\n            <ComponentB/>\n            <div className=\"container\">\n                <h1 className=\"text-white bg-dark text-center\">Patient record entry form</h1>\n                <br/>\n                <div className=\"col-lg-6 m-auto d-block\">\n            <form onSubmit={formik.handleSubmit}>\n                <div className=\"form-group\">\n                                <label htmlFor=\"user\"> Patient No. </label>\n                                <input type=\"text\" name=\"patientno\" id=\"user\" class=\"form-control\" value={formik.values.patientno}\n                    onChange={formik.handleChange}/>\n                </div>\n                <div className=\"form-group\">\n                                <label htmlFor=\"admission_date\">Date of Admission</label>\n                                <input type=\"date\" name=\"admission_date\" id=\"admission_date\" class=\"form-control\" value={formik.values.admission_date}\n                    onChange={formik.handleChange}/>\n                                \n                </div>\n                        <div className=\"form-group\">\n                        <label htmlFor=\"discharge_date\">Date of Discharge</label>\n                                <input type=\"date\" name=\"discharge_date\" id=\"discharge_date\" class=\"form-control\"value={formik.values.discharge_date}\n                    onChange={formik.handleChange}/>\n                        </div>\n        <div className=\"form-group\">\n                                <label htmlFor=\"doctor_id\">Doctor ID</label>\n                                <input type=\"text\" name=\"doctor_id\" id=\"doctor_id\" class=\"form-control\" value={formik.values.doctor_id}\n                    onChange={formik.handleChange}/>\n                        </div>\n                        <div class=\"form-group\">\n                                <label for=\"remarks\">Remarks</label>\n                                <textarea id=\"remarks\" name=\"remarks\" class=\"md-textarea form-control\" rows=\"3\" value={formik.values.remarks}\n                    onChange={formik.handleChange}></textarea>\n                                \n                        </div>\n                \n                \n                <div className=\"form-group\">\n                                <label htmlFor=\"support\"> Support Documents Link</label>\n                                <input type=\"text\" name=\"support\" id=\"support\" class=\"form-control\" value={formik.values.support}\n                    onChange={formik.handleChange}/>\n                        </div>\n                        <div class=\"form-group\">\n                                <label for=\"status\"> Status</label>\n                                <input type=\"text\" name=\"status\" id=\"status\" class=\"form-control\" value={formik.values.status}\n                    onChange={formik.handleChange}/>\n                        </div>\n                        \n                                <input type=\"submit\" name=\"submit\" value=\"Submit\" class=\"btn btn-success\">\n                      \n                        \n                </input>\n\n            </form>\n        </div>\n        </div>\n        </div>\n    )\n\n\n}\n\n\n\n\n\n\n\n\n/*\nclass ComponentA extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            employee:{\n                Id:'',\n                Name:'',\n                Location:'',\n                Salary:''\n            }\n        }\n    }\n\n\n    changeHandler=e=>{\n        const name=e.target.name;\n        const value=e.target.value;\n        this.setState({\n            employee:{\n                ...this.state.employee,\n                [name]:value\n            }\n            \n\n        });\n        \n    }\n\n    oncreateEmployee=()=>{\n        console.log(this.state.employee)\n    }\n    \n\n\n    render(){\n        \n        return (\n            \n            <div>\n                <p>Component  A</p>\n                <ComponentB/>\n                <h2>New form</h2>\n                <form>\n                    <p>\n                        <label>Employee ID:<input type=\"text\" name=\"Id\"\n                        value={this.state.employee.Id} onChange={this.changeHandler}\n                        ></input></label>\n                    </p>\n                    <p>\n                        <label>Employee Name:<input type=\"text\" name=\"Name\"\n                        value={this.state.employee.Name} onChange={this.changeHandler}\n                        ></input></label>\n                    </p>\n                    <p>\n                        <label>Employee Location:<textarea name=\"Location\"\n                        value={this.state.employee.Location} onChange={this.changeHandler}\n                        ></textarea></label>\n                    </p>\n                    <p>\n                        <label>Employee Salary:<input type=\"text\" name=\"Salary\"\n                        value={this.state.employee.Salary} onChange={this.changeHandler}\n                        ></input></label>\n                    </p>\n                </form>\n                <button onClick={this.oncreateEmployee}>Create</button>\n            </div>\n        \n\n            \n        );\n    }\n}\n\n\n\n*/\nexport default ComponentA;","import React from 'react';\nimport './App.css';\nimport ComponentA from './components/ComponentA'\nimport {UserProvider} from './components/context.js'\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      name:\"william\"\n    }\n  }\n  render(){\n    return (\n      <div >\n        <UserProvider value=\"\">\n        <ComponentA/>\n        </UserProvider>\n\n        </div>\n    )\n  }\n  \n\n  }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}